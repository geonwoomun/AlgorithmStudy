# BOJ 11726 2 x n 타일링

# 다이나믹 프로그래밍
# 동적계획법
# 1 1 2 3 5 8 13 ....
# 0 1 2 3 4 5

# dp[0] = 1  dp[1] = 1
# 점화식 고등학교 수학때   
# for i in range(2, n):
#   dp[i] = dp[i-1] + dp[i-2]

import sys

n = int(sys.stdin.readline())

D = [0 for i in range(1001)] # 1000개까지니깐 리스트를 만듦.

D[1] = 1; # n 이 1 일 땐 최대 1개, 세로로 밖에,
D[2] = 2; # n이 2 일 땐 최대 2개, 짝수면 세로로 2개 또는 가로로 2개를 할 수 있다.

for i in range(3,n+1): # 이제 3 ,4, 5 부터는 i-1, i-2를 더한 것이 개수가 된다.
    D[i] = (D[i-1] + D[i-2]) % 10007; # 3부터는 그전 값과 그 전전 값을 더하면 된다.

print(D[n]);